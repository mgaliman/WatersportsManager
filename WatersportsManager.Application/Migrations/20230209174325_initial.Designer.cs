// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WatersportsManager.Application.Persistence;

#nullable disable

namespace WatersportsManager.Application.Migrations
{
    [DbContext(typeof(WatersportsManagerDbContext))]
    [Migration("20230209174325_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WatersportsManager.Domain.BoatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FuelPercentage")
                        .HasColumnType("int");

                    b.Property<int?>("HorsePower")
                        .HasColumnType("int");

                    b.Property<bool>("IsFunctional")
                        .HasColumnType("bit");

                    b.Property<double?>("Length")
                        .HasColumnType("float");

                    b.Property<int?>("LifeJackets")
                        .HasColumnType("int");

                    b.Property<int?>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriceId")
                        .HasColumnType("int");

                    b.Property<string>("Registration")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PriceId");

                    b.ToTable("BoatType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FuelPercentage = 100,
                            HorsePower = 5,
                            IsFunctional = true,
                            Length = 6.0,
                            LifeJackets = 5,
                            MaxCapacity = 5,
                            Name = "Pasara",
                            PriceId = 5,
                            Registration = "RV324"
                        },
                        new
                        {
                            Id = 2,
                            FuelPercentage = 100,
                            HorsePower = 5,
                            IsFunctional = true,
                            Length = 6.0,
                            LifeJackets = 5,
                            MaxCapacity = 5,
                            Name = "Pasara",
                            PriceId = 4,
                            Registration = "RV372"
                        },
                        new
                        {
                            Id = 3,
                            FuelPercentage = 100,
                            HorsePower = 5,
                            IsFunctional = true,
                            Length = 6.0,
                            LifeJackets = 5,
                            MaxCapacity = 5,
                            Name = "Pasara",
                            PriceId = 4,
                            Registration = "RV826"
                        },
                        new
                        {
                            Id = 4,
                            FuelPercentage = 100,
                            HorsePower = 5,
                            IsFunctional = true,
                            Length = 6.0,
                            LifeJackets = 5,
                            MaxCapacity = 5,
                            Name = "Pasara",
                            PriceId = 5,
                            Registration = "RV437"
                        },
                        new
                        {
                            Id = 5,
                            FuelPercentage = 100,
                            HorsePower = 120,
                            IsFunctional = true,
                            Length = 6.75,
                            LifeJackets = 10,
                            MaxCapacity = 8,
                            Name = "QS 675",
                            PriceId = 7,
                            Registration = "RV652"
                        },
                        new
                        {
                            Id = 6,
                            FuelPercentage = 100,
                            HorsePower = 100,
                            IsFunctional = true,
                            Length = 6.0,
                            LifeJackets = 7,
                            MaxCapacity = 5,
                            Name = "QS 600",
                            PriceId = 5,
                            Registration = "RV354"
                        },
                        new
                        {
                            Id = 7,
                            FuelPercentage = 70,
                            HorsePower = 60,
                            IsFunctional = false,
                            Length = 5.0,
                            LifeJackets = 5,
                            MaxCapacity = 5,
                            Name = "Fisher",
                            PriceId = 5,
                            Registration = "RV917"
                        });
                });

            modelBuilder.Entity("WatersportsManager.Domain.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Camp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Camp = "Amarin",
                            City = "Rovinj",
                            Latitude = 45.102400000000003,
                            Longitude = 13.624499999999999
                        },
                        new
                        {
                            Id = 2,
                            Camp = "Veštar",
                            City = "Rovinj",
                            Latitude = 45.045000000000002,
                            Longitude = 13.6778
                        },
                        new
                        {
                            Id = 3,
                            Camp = "Vilas",
                            City = "Rovinj",
                            Latitude = 45.061999999999998,
                            Longitude = 13.663500000000001
                        },
                        new
                        {
                            Id = 4,
                            Camp = "Lanterna",
                            City = "Poreč",
                            Latitude = 45.296999999999997,
                            Longitude = 13.5944
                        });
                });

            modelBuilder.Entity("WatersportsManager.Domain.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsSkipper")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Person", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "dinop@gmail.com",
                            FirstName = "Dino",
                            IsSkipper = true,
                            LastName = "Pejić",
                            LocationId = 1,
                            Password = "cc/fPftYw6FMM2JUEAwTCVWTbkduQUB/OGjg6fBq24KRtcVg",
                            RoleId = 1,
                            Token = "",
                            Username = "dpejic"
                        },
                        new
                        {
                            Id = 2,
                            Email = "lukas@gmail.com",
                            FirstName = "Luka",
                            IsSkipper = true,
                            LastName = "Simić",
                            LocationId = 2,
                            Password = "+0NdS3qrFh/2fG4DjeVv+0f8Mmjz2qUZcpUsmJo093i3JHMG",
                            RoleId = 2,
                            Token = "",
                            Username = "lsimic"
                        },
                        new
                        {
                            Id = 3,
                            Email = "markog@gmail.com",
                            FirstName = "Marko",
                            IsSkipper = false,
                            LastName = "Galiman",
                            Password = "+ISSutLrMesoLKQdNXlR3LMGD2AqRLN9Y9gjaN4G8mmZ9xKI",
                            RoleId = 2,
                            Token = "",
                            Username = "mgaliman"
                        },
                        new
                        {
                            Id = 4,
                            Email = "iivic@gmail.com",
                            FirstName = "Ivo",
                            IsSkipper = false,
                            LastName = "Ivic",
                            Password = "2brs42UnA7pVKmMkONMmlfRGXbC7zjgRi0QVK+KuLDjFfoI3",
                            RoleId = 1,
                            Token = "",
                            Username = "iivic"
                        },
                        new
                        {
                            Id = 5,
                            Email = "pperic@gmail.com",
                            FirstName = "Pero",
                            IsSkipper = false,
                            LastName = "Peric",
                            Password = "XN9RParphd4gb4HFklcrcCxUlW6r2Xgf2znx20+VdL0Ozpuw",
                            RoleId = 1,
                            Token = "",
                            Username = "pperic"
                        },
                        new
                        {
                            Id = 6,
                            Email = "aporopat@gmail.com",
                            FirstName = "Anthony",
                            IsSkipper = true,
                            LastName = "Poropat",
                            Password = "Xw6Tap8f0WIO0bywoBP3CYkVOOQPT/tOTiKN2SI4YbtdvFVL",
                            RoleId = 2,
                            Token = "",
                            Username = "aporopat"
                        },
                        new
                        {
                            Id = 7,
                            Email = "mpoljak@gmail.com",
                            FirstName = "Matia",
                            IsSkipper = false,
                            LastName = "Poljak",
                            Password = "+ISSutLrMesoLKQdNXlR3LMGD2AqRLN9Y9gjaN4G8mmZ9xKI",
                            RoleId = 1,
                            Token = "",
                            Username = "mpoljak"
                        });
                });

            modelBuilder.Entity("WatersportsManager.Domain.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TimeTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TimeTypeId");

                    b.ToTable("Prices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TimeTypeId = 1,
                            Value = 50
                        },
                        new
                        {
                            Id = 2,
                            TimeTypeId = 2,
                            Value = 70
                        },
                        new
                        {
                            Id = 3,
                            TimeTypeId = 3,
                            Value = 100
                        },
                        new
                        {
                            Id = 4,
                            TimeTypeId = 4,
                            Value = 70
                        },
                        new
                        {
                            Id = 5,
                            TimeTypeId = 5,
                            Value = 120
                        },
                        new
                        {
                            Id = 6,
                            TimeTypeId = 6,
                            Value = 150
                        },
                        new
                        {
                            Id = 7,
                            TimeTypeId = 4,
                            Value = 150
                        },
                        new
                        {
                            Id = 8,
                            TimeTypeId = 5,
                            Value = 200
                        });
                });

            modelBuilder.Entity("WatersportsManager.Domain.PriorityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PriorityTpes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Type = "High"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Moderate"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Low"
                        });
                });

            modelBuilder.Entity("WatersportsManager.Domain.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("PriorityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PriorityTypeId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Fix Jet Ski",
                            PersonId = 1,
                            PriorityTypeId = 1,
                            Title = "Jet Ski problem"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Need more paper",
                            PersonId = 2,
                            PriorityTypeId = 3,
                            Title = "Paper problem"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Need more gasoline",
                            PersonId = 3,
                            PriorityTypeId = 2,
                            Title = "Gasoline"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Need to check money count",
                            PersonId = 5,
                            PriorityTypeId = 4,
                            Title = "Check register"
                        });
                });

            modelBuilder.Entity("WatersportsManager.Domain.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoatTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoatTypeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PersonId");

                    b.ToTable("Reservation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BoatTypeId = 1,
                            Date = new DateTime(2023, 2, 9, 18, 43, 25, 363, DateTimeKind.Local).AddTicks(3801),
                            IsPaid = true,
                            LocationId = 1,
                            PersonId = 1
                        },
                        new
                        {
                            Id = 2,
                            BoatTypeId = 2,
                            Date = new DateTime(2023, 2, 9, 18, 43, 25, 363, DateTimeKind.Local).AddTicks(3845),
                            IsPaid = false,
                            LocationId = 2,
                            PersonId = 2
                        },
                        new
                        {
                            Id = 3,
                            BoatTypeId = 3,
                            Date = new DateTime(2023, 2, 9, 18, 43, 25, 363, DateTimeKind.Local).AddTicks(3847),
                            IsPaid = false,
                            LocationId = 3,
                            PersonId = 3
                        },
                        new
                        {
                            Id = 4,
                            BoatTypeId = 4,
                            Date = new DateTime(2023, 2, 9, 18, 43, 25, 363, DateTimeKind.Local).AddTicks(3849),
                            IsPaid = true,
                            LocationId = 4,
                            PersonId = 4
                        });
                });

            modelBuilder.Entity("WatersportsManager.Domain.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int?>("ResevationId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 2, 9, 18, 43, 25, 363, DateTimeKind.Local).AddTicks(3948),
                            Description = "Great boat, it sank during the trip",
                            Name = "Austin22",
                            ResevationId = 2,
                            Star = 3
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2023, 2, 9, 18, 43, 25, 363, DateTimeKind.Local).AddTicks(3952),
                            Description = "Akward service",
                            Name = "Mirko66",
                            PersonId = 1,
                            ResevationId = 1,
                            Star = 1
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2023, 2, 9, 18, 43, 25, 363, DateTimeKind.Local).AddTicks(3954),
                            Description = "Good service",
                            Name = "Marin28",
                            PersonId = 3,
                            ResevationId = 3,
                            Star = 2
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2023, 2, 9, 18, 43, 25, 363, DateTimeKind.Local).AddTicks(3956),
                            Description = "Everything was awesome",
                            Name = "Peter55",
                            PersonId = 5,
                            ResevationId = 4,
                            Star = 5
                        });
                });

            modelBuilder.Entity("WatersportsManager.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "USER"
                        },
                        new
                        {
                            Id = 2,
                            Code = "ADMIN"
                        });
                });

            modelBuilder.Entity("WatersportsManager.Domain.TimeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TimeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "15 Min"
                        },
                        new
                        {
                            Id = 2,
                            Type = "30 Min"
                        },
                        new
                        {
                            Id = 3,
                            Type = "60 Min"
                        },
                        new
                        {
                            Id = 4,
                            Type = "1/2 Day"
                        },
                        new
                        {
                            Id = 5,
                            Type = "1 Day"
                        },
                        new
                        {
                            Id = 6,
                            Type = "Sunset"
                        });
                });

            modelBuilder.Entity("WatersportsManager.Domain.BoatType", b =>
                {
                    b.HasOne("WatersportsManager.Domain.Price", "Price")
                        .WithMany("BoatTypes")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Price");
                });

            modelBuilder.Entity("WatersportsManager.Domain.Person", b =>
                {
                    b.HasOne("WatersportsManager.Domain.Location", "Location")
                        .WithMany("People")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WatersportsManager.Domain.Role", "Role")
                        .WithMany("People")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WatersportsManager.Domain.Price", b =>
                {
                    b.HasOne("WatersportsManager.Domain.TimeType", "TimeType")
                        .WithMany("Prices")
                        .HasForeignKey("TimeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeType");
                });

            modelBuilder.Entity("WatersportsManager.Domain.Report", b =>
                {
                    b.HasOne("WatersportsManager.Domain.Person", "Person")
                        .WithMany("Reports")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatersportsManager.Domain.PriorityType", "PriorityType")
                        .WithMany("Reports")
                        .HasForeignKey("PriorityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("PriorityType");
                });

            modelBuilder.Entity("WatersportsManager.Domain.Reservation", b =>
                {
                    b.HasOne("WatersportsManager.Domain.BoatType", "BoatType")
                        .WithMany("Reservations")
                        .HasForeignKey("BoatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatersportsManager.Domain.Location", "Location")
                        .WithMany("Reservations")
                        .HasForeignKey("LocationId");

                    b.HasOne("WatersportsManager.Domain.Person", "Person")
                        .WithMany("Reservations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BoatType");

                    b.Navigation("Location");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("WatersportsManager.Domain.Review", b =>
                {
                    b.HasOne("WatersportsManager.Domain.Person", "Person")
                        .WithMany("Reviews")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WatersportsManager.Domain.Reservation", "Reservation")
                        .WithMany("Reviews")
                        .HasForeignKey("ReservationId");

                    b.Navigation("Person");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("WatersportsManager.Domain.BoatType", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("WatersportsManager.Domain.Location", b =>
                {
                    b.Navigation("People");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("WatersportsManager.Domain.Person", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("WatersportsManager.Domain.Price", b =>
                {
                    b.Navigation("BoatTypes");
                });

            modelBuilder.Entity("WatersportsManager.Domain.PriorityType", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("WatersportsManager.Domain.Reservation", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("WatersportsManager.Domain.Role", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("WatersportsManager.Domain.TimeType", b =>
                {
                    b.Navigation("Prices");
                });
#pragma warning restore 612, 618
        }
    }
}
